name: "Golang Build & Publish"

on:
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # go version
  GO_VERSION: 1.19

jobs:
  ra_version:
    permissions:
      packages: write
      actions: read
      contents: write

    name: "Generate versions from common workflow"
    # uses: "Rockwell-Automation-FTDS/configuration-cd/.github/workflows/raver.yml@1.3.3"
    uses: "./.github/workflows/raver.yml"

  build-image:
    name: Build Image
    needs: ra_version
    runs-on: ubuntu-latest

    permissions:
      packages: write
      actions: read
      contents: write          # for actions/checkout to fetch code
      pull-requests: write
      security-events: write  # for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Cosign
        uses: sigstore/cosign-installer@main
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Create Docker context
        run: |
          docker context create ftds
          docker context use ftds
          unset DOCKER_HOST
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: ftds
        env:
          DOCKER_CONTEXT: ftds
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          # version: '<version>' # default is latest (stable)
          token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'

      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DH_USERNAME }}
          password: ${{ secrets.DH_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.ACR_ENDPOINT }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=raw,value=${{ needs.ra_version.outputs.version }}
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Get today's date
        uses: mathiasvr/command-output@v2.0.0
        id: today
        with:
         run: pwd

      - run: echo Today is ${{ steps.today.outputs.stdout }}
          
      - name: Build and Test project
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          file: ./DockerfileTest
          tags: golangtest:latest
          load: true
          build-args: |
            GO_ALPINE_VERSION=1.20.2-alpine3.17
      - name: Test
        run: |
          docker run -v ${{ steps.path.outputs.outp }}:/go/testdir golangtest:latest
          ls
      - name: Upload tests file
        uses: actions/upload-artifact@v3
        with: 
          name: cover.out
          path:
            cover.out
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ripa1986/golangdemo:latest
          file: ./Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_ALPINE_VERSION=1.20.2-alpine3.17
      - name: Create tag and push
        if:  github.ref_name == 'main'
        run: |
          rc=0
          git show-ref --tags ${{ needs.ra_version.outputs.version }} --quiet || rc="$?"
          if  [ $rc -eq 0 ]; then
            echo "App no changes, skip tagging ${{ needs.ra_version.outputs.version }}"
          else
            echo "App changed , pushing new version ${{ needs.ra_version.outputs.version }} "
            git tag ${{ needs.ra_version.outputs.version }} && git push --tags
          fi
